steps:
  - label: ":linux: :corn: Build kernel modules"
    key: kernel-modules
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/kernel_builder-2022-07-28.x86_64.tar.gz"
          rootfs_treehash: "1f6052d12bccf1fd9988eff97b0b1a201519b2db"
    commands: |
      export USE_LIVE_KERNEL=false
      echo "--- clone kernel source"
      make -C software get-kernel

      # We must do a full kernel build to get `Module.symvers`, which makes the nvidia build happy
      echo "--- Build kernel"
      make -C software kernel -j$$(nproc)

      echo "--- Bundle kernel"
      cp -Lv build/bzImage bzImage

      echo "--- clone nvidia-driver source"
      make -C software get-nvidia-driver

      echo "--- Build NVIDIA driver"
      make -C software nvidia-driver -j$$(nproc)

      echo "--- Bundle NVIDIA kernel modules"
      tar -cvzf nvidia-kernel-modules.tar.gz -C "$$(echo $$(pwd)/build/lib/modules/*/kernel/drivers/video)" .

      echo "--- Build litepcie kernel modules"
      make -C software litepcie-kernel-module-install -j$$(nproc)

      echo "--- debugging"
      find $$(pwd)/build

      echo "--- Bundle litepcie kernel modules"
      tar -cvzf litepcie-kernel-modules.tar.gz -C "$$(echo $$(pwd)/build/lib/modules/*/extra)" .
    artifact_paths:
      - "nvidia-kernel-modules.tar.gz"
      - "litepcie-kernel-modules.tar.gz"
      - "bzImage"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"


  - label: ":linux: Build userspace utilities"
    key: userspace-utilities
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/kernel_builder-2022-07-28.x86_64.tar.gz"
          rootfs_treehash: "1f6052d12bccf1fd9988eff97b0b1a201519b2db"
    commands: |
      echo "--- Download CUDA"
      make -C software nvidia-cuda
      SOFTWARE_DIR=$$(pwd)/software

      echo "--- Build litepcie user library"
      make -C software litepcie-user-library -j$$(nproc) LITEPCIE_PREFIX=$$(pwd)/build/litepcie-user-library

      echo "--- Bundle liblitepcie"
      tar -czvf liblitepcie.tar.gz -C build/litepcie-user-library .

      echo "--- Build LMS7002M driver library"
      make -C software LMS7002M-driver -j$$(nproc) LMS7002M_PREFIX=$$(pwd)/build/LMS7002M-driver

      echo "--- Bundle LMS7002M driver"
      tar -czvf lms7002m.tar.gz -C build/LMS7002M-driver .

      echo "--- Build SoapySDR"
      make -C software soapysdr -j$$(nproc) SOAPYSDR_PREFIX=$$(pwd)/build/soapysdr

      echo "--- Build LimeSuite driver library"
      ls -la $$(pwd)/build
      ls -la $$(pwd)/build/bin
      ls -la $$(pwd)/software
      ls -la $$(pwd)/software/nvidia-cuda
      ls -la $$(pwd)/software/nvidia-cuda/bin
      make -C software limesuite -j$$(nproc) SOAPYSDR_PREFIX=$$(pwd)/build/soapysdr

      echo "--- Bundle SoapySDR"
      tar -czvf soapysdr.tar.gz -C build/soapysdr .

      echo "--- Build SoapySDR-XTRX plugin"
      make -C software soapysdr-xtrx -j$$(nproc) SOAPYSDR_XTRX_PREFIX=$$(pwd)/build/soapysdr-xtrx

      echo "--- Build SoapySDR-XTRX-Lime plugin"
      make -C software soapysdr-xtrx-lime -j$$(nproc) SOAPYSDR_XTRX_PREFIX=$$(pwd)/build/soapysdr-xtrx

      echo "--- Bundle SoapySDR-XTRX"
      tar -czvf soapysdr-xtrx.tar.gz -C build/soapysdr-xtrx .

      echo "--- Build libusb"
      make -C software libusb -j$$(nproc) LIBUSB_PREFIX=$$(pwd)/build/libusb

      echo "--- Bundle libusb"
      tar -czvf libusb.tar.gz -C build/libusb .
    artifact_paths:
      - "liblitepcie.tar.gz"
      - "lms7002m.tar.gz"
      - "soapysdr.tar.gz"
      - "soapysdr-xtrx.tar.gz"
      - "libusb.tar.gz"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"


  - label: ":linux: :robot_face: Run XTRX tests"
    depends_on:
      - kernel-modules
      - gateware
      - userspace-utilities
    plugins:
      - improbable-eng/metahook:
          pre-exit: |
            echo "--- dmesg output"
            dmesg
      - JuliaCI/julia#v1:
          version: '1'
    commands: |
      echo "--- System info"
      echo "uname -a"
      uname -a

      # Add `sbin` to our `path` for `depmod`, `modprobe`, etc...
      export PATH=$$PATH:/sbin

      echo "--- Get kernel modules"
      buildkite-agent artifact download --step kernel-modules *-kernel-modules.tar.gz .
      MODDIR="/lib/modules/$$(uname -r)"
      mkdir -p $${MODDIR}

      tar -C "$${MODDIR}" -zxvf litepcie-kernel-modules.tar.gz
      tar -C "$${MODDIR}" -zxvf nvidia-kernel-modules.tar.gz

      # Depmod fails without these two files
      touch "$${MODDIR}/modules.builtin"
      touch "$${MODDIR}/modules.order"
      depmod -v

      echo "--- Get gateware bundle"
      buildkite-agent artifact download --step gateware litex-gateware.tar.gz .
      mkdir -p build
      tar -C build -zxf litex-gateware.tar.gz

      echo "--- Load bitstream on device"
      echo "lspci -vv"
      lspci -vv
      echo
      openocd -f gateware/openocd_ftdi232.cfg -c "init; pld load 0 {./build/fairwaves_xtrx_platform.bit}; exit"

      echo "--- Reset device (via remove + rescan)"
      ./test/reset.sh -r

      echo "--- Load kernel modules"
      echo -n "Load liteuart: "
      modprobe liteuart
      echo "✔"

      echo -n "Load nvidia: "
      modprobe nvidia
      echo "✔"

      echo -n "Load litepcie: "
      modprobe litepcie
      echo "✔"

      echo "--- Get userspace utilities"
      buildkite-agent artifact download --step userspace-utilities liblitepcie.tar.gz .
      tar -C build -zxf liblitepcie.tar.gz

      echo "--- Download CUDA toolkit"
      make -C software nvidia-cuda
      # Make sure that future steps can load `libcuda.so`.  Our build process symlinks `libcuda.so.1` here.
      export "LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:$$(pwd)/build/lib"

      echo "--- litepcie_util scratch_test"
      ./build/bin/litepcie_util scratch_test

      echo "--- litepcie_util dma_test for 10s"
      # Fail the build if we do not transfer at least 100k buffers
      ./build/bin/litepcie_util dma_test -t 10000 -b 100000

      echo "--- Download SoapySDR/soapysdr-xtrx"
      buildkite-agent artifact download --step userspace-utilities soapysdr.tar.gz .
      tar -C build -zxf soapysdr.tar.gz
      buildkite-agent artifact download --step userspace-utilities soapysdr-xtrx.tar.gz .
      tar -C build -zxf soapysdr-xtrx.tar.gz

      # Because we built these in silo'ed directories, we must override this value
      export SOAPY_SDR_PLUGIN_PATH=$$(pwd)/build/lib/SoapySDR/modules0.8-2

      echo "--- Instantiate project"
      julia --project -e 'import Pkg; Pkg.instantiate()'
      julia --project software/scripts/julia_preferences_setup.jl
      julia --project -e 'import Pkg; Pkg.precompile()'

      echo "--- SoapySDRUtil"
      echo "SoapySDRUtil --info"
      ./build/bin/SoapySDRUtil --info

      echo
      echo "SoapySDRUtil --find"
      SOAPY_SDR_LOG_LEVEL=debug ./build/bin/SoapySDRUtil --find

      echo "--- Run acquire_iq.jl --full"
      julia -t3 --project software/scripts/acquire_iq.jl --full
      for f in *.png; do
        buildkite-agent artifact upload $${f}
      done

      echo "--- Reset device (via remove + rescan)"
      ./test/reset.sh -r

      echo "--- Run missing_samples.jl --full"
      julia --project --threads auto software/XTRX.jl/test/loopback_tests/missing_samples.jl
      for f in sample_shifts/*.png; do
        buildkite-agent artifact upload $${f}
      done
    agents:
      os: "linux"
      queue: "triad"
      sdr_present: "xtrx"
