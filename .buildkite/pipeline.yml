steps:
  - label: ":linux: :corn: :hammer_and_wrench: Build NVIDIA and litepcie kernel modules"
    key: kernel-modules
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaComputing/rootfs-images/releases/download/kernel-builder-2022-07-12/kernel_builder.x86_64.tar.gz"
          rootfs_treehash: "c0660b88baa6e9607ef859b5daa349fc8de8712c"
          workspaces:
            - "/cache/repos:/cache/repos"
    commands: |
      echo "--- clone kernel source"
      make -C software kernel

      # We must do a full kernel build to get `Module.symvers`, which makes the nvidia build happy
      echo "--- Build kernel"
      KERNEL_DIR=$$(pwd)/software/kernel
      make -C "$${KERNEL_DIR}" defconfig -j$$(nproc)
      make -C "$${KERNEL_DIR}" -j$$(nproc)

      echo "--- Bundle kernel"
      cp -Lv software/kernel/arch/$$(uname -m)/boot/bzImage bzImage

      echo "--- clone nvidia-driver source"
      make -C software nvidia-driver

      echo "--- Build NVIDIA driver"
      NVIDIA_MODLIB=$$(pwd)/nvidia-build
      mkdir -p "$${NVIDIA_MODLIB}"
      make -C software/nvidia-driver -j$$(nproc) SYSSRC="$${KERNEL_DIR}" MODLIB="$${NVIDIA_MODLIB}"
      make -C software/nvidia-driver -j$$(nproc) SYSSRC="$${KERNEL_DIR}" MODLIB="$${NVIDIA_MODLIB}" modules_install

      echo "--- Bundle NVIDIA kernel modules"
      cp software/nvidia-driver/kernel-open/modules.order "$${NVIDIA_MODLIB}/kernel/drivers/video/"
      tar -cvzf nvidia-kernel-modules.tar.gz -C "$${NVIDIA_MODLIB}/kernel/drivers/video" .

      echo "--- Build litepcie kernel modules"
      make -C software/litepcie-kernel-module
      
      echo "--- Bundle litepci kernel modules"
      LITEPCIE_KOS=$$(cd software/litepcie-kernel-module; ls *.ko *.order)
      tar -cvzf litepcie-kernel-modules.tar.gz -C software/litepcie-kernel-module $${LITEPCIE_KOS}
    artifact_paths:
      - "nvidia-kernel-modules.tar.gz"
      - "litepcie-kernel-modules.tar.gz"
      - "bzImage"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"


  - label: ":linux: :hammer_and_wrench: Build litepcie user library"
    key: liblitepcie
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaComputing/rootfs-images/releases/download/kernel-builder-2022-07-12/kernel_builder.x86_64.tar.gz"
          rootfs_treehash: "c0660b88baa6e9607ef859b5daa349fc8de8712c"
          workspaces:
            - "/cache/repos:/cache/repos"
    commands: |
      echo "--- Download CUDA"
      make -C software nvidia-cuda

      echo "--- Build litepcie user library"
      LLP_BUILD=$$(pwd)/build
      mkdir -p $${LLP_BUILD}
      make -C software/litepcie-user-library -j$$(nproc) prefix=$${LLP_BUILD} install

      echo "--- Bundle liblitepcie"
      tar -czvf liblitepcie.tar.gz -C $${LLP_BUILD} .
    artifact_paths:
      - "liblitepcie.tar.gz"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :robot_face: Test loading kernel modules"
    depends_on:
      - kernel-modules
    commands: |
      echo "--- Download kernel module bundles"
      buildkite-agent artifact download --step kernel-modules *-kernel-modules.tar.gz .

      echo "--- Extract bundles"
      MODDIR="/lib/modules/$$(uname -r)"
      export PATH=$$PATH:/sbin
      mkdir -p $${MODDIR}

      mkdir /tmp/litepcie /tmp/nvidia
      tar -C /tmp/litepcie -zxf litepcie-kernel-modules.tar.gz
      tar -C /tmp/nvidia -zxf nvidia-kernel-modules.tar.gz
      mv /tmp/litepcie/*.ko "$${MODDIR}"
      mv /tmp/nvidia/*.ko "$${MODDIR}"
      cat /tmp/litepcie/modules.order /tmp/nvidia/modules.order > "$${MODDIR}/modules.order"
      touch "$${MODDIR}/modules.builtin"
      depmod -v

      echo "+++ Load kernel modules"
      echo -n "Load liteuart: "
      modprobe liteuart
      echo "✔"

      echo -n "Load nvidia: "
      modprobe nvidia
      echo "✔"

      echo -n "Load litepcie: "
      modprobe litepcie
      echo "✔"
    agents:
      os: "linux"
      queue: "triad"
