steps:
  - label: ":electron: Build FPGA gateware and firmware"
    key: gateware
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
          # Set a depot hard size limit of 200GB, since we have artifacts in excess of 100GB here.
          depot_hard_size_limit: '214748364800'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/litex_builder-2022-07-14.x86_64.tar.gz"
          rootfs_treehash: "a50c2e8710fa0bbd1564ccfab01443ec86355d9e"
          workspaces:
            # Include `/cache/repos` so that we can `git diff`
            - "/cache/repos:/cache/repos"
    commands: |
      echo "--- patch faulty rootfs"
      rm -f /usr/local/bin/vivado
      export PATH=$${PATH}:$$(echo /usr/local/vivado/Vivado/*/bin)

      echo "--- Build LiteX project"
      python3 fairwaves_xtrx.py --build

      echo "--- Bundle gateware"
      tar -czf litex-gateware.tar.gz -C build/fairwaves_xtrx_platform/gateware fairwaves_xtrx_platform.bin

      echo "--- Bundle firmware"
      tar -czf litex-firmware.tar.gz -C firmware firmware.bin

      echo "--- Bundle generated headers"
      tar -czf litex-headers.tar.gz -C build/fairwaves_xtrx_platform/software/include/generated .

      echo "--- Test generated headers didn't change"
      git diff --exit-code software/litepcie-kernel-module
    artifact_paths:
      - "litex-gateware.tar.gz"
      - "litex-firmware.tar.gz"
      - "litex-headers.tar.gz"
    # We restrict to running on the `vivado` queue because the litex_builder rootfs is >100GB in size!
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"
      queue: "vivado"
    env:


  - label: ":linux: :corn: Build NVIDIA and litepcie kernel modules"
    key: kernel-modules
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/kernel_builder-2022-07-13.x86_64.tar.gz"
          rootfs_treehash: "e8c2bfdb00fb2295e2f3b90c55daaf3602c07f9a"
    commands: |
      echo "--- clone kernel source"
      make -C software get-kernel

      # We must do a full kernel build to get `Module.symvers`, which makes the nvidia build happy
      echo "--- Build kernel"
      make -C software kernel -j$$(nproc)

      echo "--- Bundle kernel"
      cp -Lv build/kernel/bzImage bzImage

      echo "--- clone nvidia-driver source"
      make -C software get-nvidia-driver

      echo "--- Build NVIDIA driver"
      NVIDIA_DRIVER_MODPATH="$$(pwd)/build/nvidia-driver"
      make -C software nvidia-driver -j$$(nproc) NVIDIA_DRIVER_MODPATH=$${NVIDIA_DRIVER_MODPATH}

      echo "--- Bundle NVIDIA kernel modules"
      tar -cvzf nvidia-kernel-modules.tar.gz -C "$$(echo $${NVIDIA_DRIVER_MODPATH}/lib/modules/*/kernel/drivers/video)" .

      echo "--- Build litepcie kernel modules"
      LITEPCIE_MODPATH="$$(pwd)/build/litepci-kernel-module"
      make -C software litepcie-kernel-module -j$$(nproc) LITEPCIE_MODPATH="$${LITEPCIE_MODPATH}"
      
      echo "--- Bundle litepci kernel modules"
      tar -cvzf litepcie-kernel-modules.tar.gz -C "$${LITEPCIE_MODPATH}" .
    artifact_paths:
      - "nvidia-kernel-modules.tar.gz"
      - "litepcie-kernel-modules.tar.gz"
      - "bzImage"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"


  - label: ":linux: Build litepcie user library and soapysdr driver"
    key: liblitepcie
    plugins:
      - JuliaCI/julia#v1:
          version: '1'
      - staticfloat/sandbox#v1:
          rootfs_url: "https://jc-rootfs-images.s3.amazonaws.com/kernel_builder-2022-07-13.x86_64.tar.gz"
          rootfs_treehash: "e8c2bfdb00fb2295e2f3b90c55daaf3602c07f9a"
    commands: |
      echo "--- Download CUDA"
      make -C software nvidia-cuda
      SOFTWARE_DIR=$$(pwd)/software

      echo "--- Build litepcie user library"
      LITEPCIE_PREFIX=$$(pwd)/build/litepcie-user-library
      mkdir -p $${LITEPCIE_PREFIX}
      make -C software litepcie-user-library -j$$(nproc) LITEPCIE_PREFIX=$${LITEPCIE_PREFIX}

      echo "--- Bundle liblitepcie"
      tar -czvf liblitepcie.tar.gz -C $${LITEPCIE_PREFIX} .

      echo "--- Build SoapySDR"
      SS_PREFIX=$$(pwd)/build/soapysdr
      make -C software soapysdr -j$$(nproc) SOAPY_PREFIX=$${SS_PREFIX}

      echo "--- Bundle SoapySDR"
      tar -czvf soapysdr.tar.gz -C $${SS_PREFIX} .

      echo "--- Build SoapySDR-XTRX plugin"
      SSX_BUILD=$${SOFTWARE_DIR}/soapysdr-xtrx/build
      SSX_PREFIX=$$(pwd)/build/soapysdr-xtrx
      mkdir -p $${SSX_BUILD}
      cmake -DCUDAToolkit_ROOT=$${SOFTWARE_DIR}/nvidia-cuda \
            -DSoapySDR_ROOT=$${SS_PREFIX} \
            -DCMAKE_INSTALL_PREFIX=$${SSX_PREFIX} \
            -S $${SOFTWARE_DIR}/soapysdr-xtrx \
            -B $${SSX_BUILD}
      make -C $${SSX_BUILD} -j$$(nproc) install

      echo "--- Bundle SoapySDR-XTRX"
      tar -czvf soapysdr-xtrx.tar.gz -C $${SSX_PREFIX} .
    artifact_paths:
      - "liblitepcie.tar.gz"
      - "soapysdr.tar.gz"
      - "soapysdr-xtrx.tar.gz"
    agents:
      sandbox_capable: "true"
      os: "linux"
      arch: "x86_64"

  - label: ":linux: :robot_face: Test loading kernel modules"
    depends_on:
      - kernel-modules
    commands: |
      echo "--- Download kernel module bundles"
      buildkite-agent artifact download --step kernel-modules *-kernel-modules.tar.gz .

      echo "--- Extract bundles"
      MODDIR="/lib/modules/$$(uname -r)"
      export PATH=$$PATH:/sbin
      mkdir -p $${MODDIR}

      mkdir /tmp/litepcie /tmp/nvidia
      tar -C /tmp/litepcie -zxf litepcie-kernel-modules.tar.gz
      tar -C /tmp/nvidia -zxf nvidia-kernel-modules.tar.gz
      mv /tmp/litepcie/*.ko "$${MODDIR}"
      mv /tmp/nvidia/*.ko "$${MODDIR}"

      # Depmod fails without these two files
      touch "$${MODDIR}/modules.builtin"
      touch "$${MODDIR}/modules.order"
      depmod -v

      echo "+++ Load kernel modules"
      echo -n "Load liteuart: "
      modprobe liteuart
      echo "✔"

      echo -n "Load nvidia: "
      modprobe nvidia
      echo "✔"

      echo -n "Load litepcie: "
      modprobe litepcie
      echo "✔"
    agents:
      os: "linux"
      queue: "triad"
